//wa-migration-runtime
plugins {
	id 'java'
	id 'application'
}
compileJava.options.encoding = 'UTF-8'
dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation project(":wa-migration-core")
	implementation project(":wa-migration-impl")
    implementation group: 'com.sparkjava', name: 'spark-core', version: '2.8.0'
	implementation group: 'commons-daemon', name: 'commons-daemon', version: '1.2.3'
	implementation group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
	
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.30'
	implementation 		  	'org.projectlombok:lombok:1.18.16'
	annotationProcessor 	'org.projectlombok:lombok:1.18.16'
	testImplementation 		'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
	testImplementation 'junit:junit:4.12'
}
application {
	mainClass='com.quantum.mig.MigrationMain'
}
distributions {
	var res_path;
	var pProjectName;
	var module_name;
	
	if(project.hasProperty('prj')){
		pProjectName = prj;			
	} else {
		pProjectName = 'wa-migration';
	}
	//module_name 은 startup.sh 에서 파라미터로 받음
	res_path = pProjectName+'/conf/module';
	println "resource path : " + res_path;			
    main {
        contents {
        	distributionBaseName = 'wa-migration-runtime_' + project.ext.main_ver
        	into('conf'){
        		from '../conf/'
        	}
			into('bin'){
	    		from '../shell'
    		}
    		into('logs'){
    			from '../release_log_folder'
    		}
        }
    }
}
startScripts {
	def unix_start_script={line->
		if(line.startsWith('exec')){
			line = line.replace('exec','nohup')
			line += ' >${WA_MIG_PATH}/logs/${MODULE_NAME}/${MODULE_NAME}_nohup.out  &'
			line += '\n echo "$!" > ${MODULE_NAME}.pid'
		}
		return line
	}

	doLast {
    	unixScript.text    = unixScript.readLines().plus(23,'. ./export.sh').join('\n')
        new File(buildDir,'scripts/startup.sh').text  = unixScript.readLines().collect(unix_start_script).join('\n')
    }
}

tasks.register('release-' +  project.name){
	group = "ide";
	dependsOn('build')
	def path = "../release/"+project.name;
	doLast(){
		copy{
			from ("$project.buildDir" + "/distributions")
			into path
		}
		copy{
			from ("$project.buildDir" + "/install")
			into path 
		}
	}
}